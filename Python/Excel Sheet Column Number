Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
 

Example 1:

Input: columnTitle = "A"
Output: 1
Example 2:

Input: columnTitle = "AB"
Output: 28
Example 3:

Input: columnTitle = "ZY"
Output: 701
 

Constraints:

1 <= columnTitle.length <= 7
columnTitle consists only of uppercase English letters.
columnTitle is in the range ["A", "FXSHRXW"].


Solution

Step 1:
To start, when seeing the 26 English alphabets are used to represent numbers, the first intuition is to use a dictionary to pair 1-26 and A-Z, before considering the calculation in detials.

Method 1:
Using zip()
alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
nums = range(1,27)
alpha_dict = dict(zip(alphabet, nums))
print(alpha_dict)

Method 2:
Comprehension
alpha_dict = {alphabet[i]: nums[i] for i in range(len(alphabet))}
print(alpha_dict)

Step 2:
With this dictionary in mind, write down a few examples, a formula will soon pop up clearly:

AA -> 26 * 1 + 1
AB -> 26 * 1 + 2
ZZ -> 26 * 26 + 26
ABC -> 26^2 * 1 + 26 * 2 + 3
That is:
AA -> 26^1 * A + 26^0 * A
AB -> 26^1 * A + 26^0 * B
ZZ -> 26^1 * Z + 26^0 * Z
ABC -> 26^2 * A + 26^1 * B + 26^0 * C
So the formula is:

26^largest_digit_value * Letter_on_digit + ... + 26^0 * Letter_on_digit

Translate above intuition into code:

class Solution:
    def titleToNumber(self, columnTitle: str) -> int:
	
		# Use dictionary to map alphabets A to Z one-on-one to integer 1 to 26:
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        nums = range(1,27)
        alpha_to_nums = {alphabet[i]: nums[i] for i in range(len(alphabet))}
		
		# Express the formula above in a simple for loop, iterating from the last digit:
        column_number = 0
        for pos, letter in enumerate (reversed(columnTitle)):
            column_number +=  26**(pos) * alpha_to_nums[letter] 
			
        return column_number
